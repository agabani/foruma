name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  cargo-build:
    name: Cargo Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: foruma-web
          path: ./target/debug/foruma-web

  cargo-clippy:
    name: Cargo Clippy
    runs-on: ubuntu-latest
    needs:
      - cargo-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          args: -- -D warnings
          name: Clippy Results
          token: ${{ secrets.GITHUB_TOKEN }}

  cargo-coverage:
    name: Cargo Coverage
    runs-on: ubuntu-latest
    needs:
      - cargo-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          override: true
          toolchain: stable
      - name: Tarpaulin
        uses: actions-rs/tarpaulin@v0.1.0
        with:
          args: '--ignore-tests'
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.5.0
        with:
          token: ${{secrets.CODECOV_TOKEN}}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: cobertura.xml

  cargo-format:
    name: Cargo Format
    runs-on: ubuntu-latest
    needs:
      - cargo-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Format
        uses: actions-rs/cargo@v1
        with:
          args: --all -- --check
          command: fmt

  cargo-test:
    name: Cargo Test
    runs-on: ubuntu-latest
    needs:
      - cargo-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cargo Cache
        id: cargo-cache
        uses: actions/cache@v2
        with:
          path: |
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test

  node-build:
    name: Node Build
    runs-on: ubuntu-latest
    container: cypress/browsers:node14.16.0-chrome89-ff86
    defaults:
      run:
        working-directory: ./foruma-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache
        id: node-and-build-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            ./foruma-frontend/build
            ./foruma-frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Cypress Install
        uses: cypress-io/github-action@v2
        with:
          working-directory: ./foruma-frontend
          runTests: false
      - name: Install
        run: npm ci
      - name: Build
        run: npm run build

  node-lint:
    name: Node Lint
    runs-on: ubuntu-latest
    needs:
      - node-build
    container: cypress/browsers:node14.16.0-chrome89-ff86
    defaults:
      run:
        working-directory: ./foruma-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache
        id: node-and-build-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            ./foruma-frontend/build
            ./foruma-frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Lint
        run: npm run lint

  node-test:
    name: Node Test
    runs-on: ubuntu-latest
    needs:
      - node-build
    container: cypress/browsers:node14.16.0-chrome89-ff86
    defaults:
      run:
        working-directory: ./foruma-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache
        id: node-and-build-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            ./foruma-frontend/build
            ./foruma-frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Test
        run: npm run test:unit

  e2e-ui-chrome-test:
    name: "E2E UI Chrome Test"
    timeout-minutes: 15
    runs-on: ubuntu-latest
    container: cypress/browsers:node14.16.0-chrome89-ff86
    needs:
      - node-test
      - cargo-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Node Cache
        id: node-and-build-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            ./foruma-frontend/build
            ./foruma-frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: foruma-web
          path: ./target/debug/
      - name: Run Artifact
        env:
          APP_CORS__ORIGINS: http://localhost:8080
          APP_HTTP_SERVER__HOST: 127.0.0.1
          APP_HTTP_SERVER__PORT: 18080
        run: |
          chmod +x ./target/debug/foruma-web
          ./target/debug/foruma-web &
      - name: Check Artifact
        run: |
          curl -v http://localhost:18080/health/readiness
      - name: "Test"
        uses: cypress-io/github-action@v2
        with:
          working-directory: ./foruma-frontend
          install: false
          start: |
            npm run serve
          wait-on: |
            http://localhost:8080
          wait-on-timeout: 120
          browser: chrome
          record: true
          group: "UI - Chrome"
          spec: "tests/e2e/**/*"
        env:
          CYPRESS_baseUrl: http://localhost:8080
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  e2e-ui-chrome-mobile-test:
    name: "E2E UI Chrome Mobile Test"
    timeout-minutes: 15
    runs-on: ubuntu-latest
    container: cypress/browsers:node14.16.0-chrome89-ff86
    needs:
      - node-test
      - cargo-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Node Cache
        id: node-and-build-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            ./foruma-frontend/build
            ./foruma-frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: foruma-web
          path: ./target/debug/
      - name: Run Artifact
        env:
          APP_CORS__ORIGINS: http://localhost:8080
          APP_HTTP_SERVER__HOST: 127.0.0.1
          APP_HTTP_SERVER__PORT: 18080
        run: |
          chmod +x ./target/debug/foruma-web
          ./target/debug/foruma-web &
      - name: Check Artifact
        run: |
          curl -v http://localhost:18080/health/readiness
      - name: "Test"
        uses: cypress-io/github-action@v2
        with:
          working-directory: ./foruma-frontend
          install: false
          config: "viewportWidth=375,viewportHeight=667"
          start: |
            npm run serve
          wait-on: |
            http://localhost:8080
          wait-on-timeout: 120
          browser: chrome
          record: true
          group: "UI - Chrome - Mobile"
          spec: "tests/e2e/**/*"
        env:
          CYPRESS_baseUrl: http://localhost:8080
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
